"""Slicer tool

    For more information run: slicer --help
    
    Author: Stefan Urbanek <stefan.urbanek@gmail.com>
    Date: 2011-01
"""

import argparse
import pymongo
import json
import argparse
import sys
import cubes
import urlparse

def validate_model(args):
    """docstring for validate_model"""
    print("loading model %s" % args.ref)
    model = cubes.load_model(args.ref)

    print("-------------------------")
    print("cubes: %d" % len(model.cubes))
    for cube_name, cube in model.cubes.items():
        print("    %s" % cube_name)
        
    print("dimensions: %d" % len(model.dimensions))
    for dim in model.dimensions:
        print("    %s" % dim.name)

    print("-------------------------")
    error_count = 0
    warning_count = 0
    default_count = 0
    results = model.validate()

    show_warnings = args.show_warnings
    show_defaults = args.show_defaults

    if not results:
        print("model is valid")
    else:
        print("\nvalidation results:\n")
        for result in results:
            display = True
            if result[0] == "error":
                error_count += 1
            elif result[0] == "warning":
                warning_count += 1
                display = show_warnings
            elif result[0] == "default":
                display = show_defaults
                default_count += 1
            if display:
                print("%s: %s" % result)

    if error_count == 0:
        if warning_count == 0:
            if default_count == 0:
                message = "model can be used"
            else:
                message = "model can be used, make sure that defaults reflect reality"
        else:
            message = "not recommended to use the model, some issues might emerge"
    else:
        message = "model can not be used"

    print("\ndefaults used: %d" % default_count)
    print("%d errors, %d warnings: %s" % (error_count, warning_count, message))


def model_to_json(args):
    """docstring for validate_model"""
    model = brewery.cubes.load_model(args.ref)
    print json.dumps(model.to_dict())

################################################################################
# Main code

parser = argparse.ArgumentParser(description='Cubes runner')
# parser.add_argument('command')
# parser.add_argument('command_args', nargs = '*', default = [])
subparsers = parser.add_subparsers(title='commands', help='additional help')

################################################################################
# Command: valdate_model

model_parser = subparsers.add_parser('model')
model_subparsers = model_parser.add_subparsers(title='model commands', help='additional model help')

parser_validate = model_subparsers.add_parser('validate')
parser_validate.add_argument('-d', '--defaults', 
                            dest = 'show_defaults', action = 'store_true', default = False,
                            help='show defaults')
parser_validate.add_argument('-w', '--no-warnings', 
                            dest = 'show_warnings', action = 'store_false', default = True, 
                            help='disable warnings')
parser_validate.add_argument('ref', help='model reference - can be a local file path or URL')
parser_validate.set_defaults(func=validate_model)

################################################################################
# Command: model_to_json

parser_validate = model_subparsers.add_parser('json')
parser_validate.add_argument('ref', help='model reference - can be a local file path or URL')
parser_validate.set_defaults(func=model_to_json)

args = parser.parse_args(sys.argv[1:])

args.func(args)
